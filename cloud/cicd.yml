AWSTemplateFormatVersion: "2010-09-09"
Description: "RemoteDevEnv CI/CD"


Resources:

  SourceStorage:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "etrg-${AWS::StackName}-artifacts"
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"

  ImageRepository:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: !Sub "${AWS::StackName}-pipeline"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: "allow-push"
            Effect: "Allow"
            Principal:
              AWS:
                - !Ref "AWS::AccountId"
            Action:
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"
          - Sid: "allow-pull"
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"

  BuilderServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${AWS::StackName}-builder-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess"
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
      Policies:
        - PolicyName: "allow-put-storage"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource:
                  - !GetAtt "SourceStorage.Arn"
                  - !Sub
                    - "${bucketArn}/*"
                    - { "bucketArn": !GetAtt "SourceStorage.Arn" }

  CiBuilder:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Sub "${AWS::StackName}-test-builder"
      Description: "Builder for testing project"
      Artifacts:
        Type: "CODEPIPELINE"
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
      Environment:
        Type: "LINUX_CONTAINER"
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: !Sub
          - "${image}:latest"
          - { "image": !GetAtt "ImageRepository.RepositoryUri" }
        ImagePullCredentialsType: "CODEBUILD"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: "cloud/buildspec/test.yml"
      ServiceRole: !GetAtt "BuilderServiceRole.Arn"
      Visibility: "PRIVATE"
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"

  CdBuilder:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Sub "${AWS::StackName}-package-builder"
      Description: "Builder for packaging project"
      Artifacts:
        Type: "CODEPIPELINE"
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
      Environment:
        Type: "LINUX_CONTAINER"
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: !Sub
          - "${image}:latest"
          - { "image": !GetAtt "ImageRepository.RepositoryUri" }
        ImagePullCredentialsType: "CODEBUILD"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: "cloud/buildspec/build.yml"
      ServiceRole: !GetAtt "BuilderServiceRole.Arn"
      Visibility: "PRIVATE"
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"

  PipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AWSCloudFormationFullAccess"
      Policies:
        - PolicyName: "allow-push-artifacts"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "codestar-connections:UseConnection"
                Resource:
                  - !ImportValue "GitHubCodeStarConnection:Arn"
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - !GetAtt "SourceStorage.Arn"
                  - !Sub 
                    - "${bucketArn}/*"
                    - { "bucketArn": !GetAtt "SourceStorage.Arn" }
        - PolicyName: "allow-launch-builder"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "codebuild:*"
                Resource:
                  - !GetAtt "CiBuilder.Arn"
                  - !GetAtt "CdBuilder.Arn"
        - PolicyName: "allow-pass-role"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: "Allow"
              Action:
                - "iam:PassRole"
              Resource: "*"
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"

  CFExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: "Cloudformation execution role to deploy the stack"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "allow-manage-apigateway"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "apigateway:*"
                Resource: "*"
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"

  Pipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub "${AWS::StackName}-pipeline"
      RoleArn: !GetAtt "PipelineRole.Arn"
      ArtifactStore:
        Type: "S3"
        Location: !Ref "SourceStorage"
      RestartExecutionOnUpdate: False
      Stages:
        - Name: "PullSource"
          Actions:
            - ActionTypeId:
                Category: "Source"
                Owner: "AWS"
                Provider: "CodeStarSourceConnection"
                Version: 1
              Name: "DownloadSource"
              Configuration:
                ConnectionArn: !ImportValue "GitHubCodeStarConnection:Arn"
                FullRepositoryId: "emerictrg/remotedevenv"
                BranchName: "main"
                DetectChanges: True
              OutputArtifacts:
                - Name: "source-from-repo"
        - Name: "DeployProduction"
          Actions:
            - ActionTypeId:
                Category: "Deploy"
                Owner: "AWS"
                Provider: "CloudFormation"
                Version: 1
              Name: "DeployApi"
              Configuration:
                ActionMode: "CREATE_UPDATE"
                StackName: "remotedevenv-api"
                ChangeSetName: "codepipeline-changes"
                TemplatePath: "source-from-repo::cloud/api.yml"
                RoleArn: !GetAtt "CFExecutionRole.Arn"
              InputArtifacts:
                - Name: "source-from-repo"
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"
                  
